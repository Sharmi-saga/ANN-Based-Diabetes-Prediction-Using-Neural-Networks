# -*- coding: utf-8 -*-
"""AI-Powered Diabetes Prediction Using Neural Networks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hQoSZx0eViiQWwCIHXfPHULnoOB2LPRu
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, accuracy_score
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

dataset = pd.read_csv('Healthcare-Diabetes.csv')

dataset.info()

dataset.isnull().sum()

dataset = dataset.drop(columns=['Id'])

plt.figure(figsize=(6,4))
sns.countplot(x='Outcome', data=dataset)
plt.title('Distribution of Diabetes Outcome (0 = No, 1 = Yes)')
plt.xlabel('Outcome')
plt.ylabel('Count')
plt.show()

# This cell depends on the 'dataset' variable being defined in a previous cell.
X = dataset.iloc[:, :-1].values  # Features
y = dataset.iloc[:, -1].values   # Target

dataset.fillna(dataset.mean(), inplace=True)

sc = StandardScaler()
X = sc.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

model = Sequential()

model.add(Dense(units=512, activation='relu', input_dim=X_train.shape[1]))

model.add(Dropout(0.4))

model.add(Dense(units=512, activation='relu'))

model.add(Dropout(0.4))

model.add(Dense(units=512, activation='relu'))

model.add(Dense(units=1, activation='sigmoid'))

optimizer = tf.keras.optimizers.Adam(learning_rate=0.0005)
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])

early_stopping = EarlyStopping(monitor='val_loss', patience=50, restore_best_weights=True)

lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=10, verbose=1)

history = model.fit(X_train, y_train, batch_size=64, epochs=500, validation_data=(X_test, y_test),
                    callbacks=[early_stopping, lr_scheduler])

y_pred = model.predict(X_test)
y_pred = (y_pred > 0.5)

cm = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)

print("Confusion Matrix:")
print(cm)
print(f"Accuracy: {accuracy * 100:.2f}%")

plt.figure(figsize=(6,4))
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Training vs Validation Accuracy')
plt.legend(loc='lower right')
plt.show()

plt.figure(figsize=(6,4))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training vs Validation Loss')
plt.legend(loc='upper right')
plt.show()